---
description: >
  USE WHEN: 改修/リファクタ/依存更新/仕様変更を行うとき
  GOAL: 差分駆動・契約先行・回帰防止・観測可能な変更
  OUTPUT: 影響列挙→契約更新→テスト更新→理由明記→品質確認
globs: []
alwaysApply: true
---

## Checklist
- 差分駆動: 変更設計→影響領域（関数/API/画面/スキーマ）を列挙し、該当テストを追加/更新。
- 意図的変更と回帰を区別し、期待値変更の理由をPR本文に明記。
- 契約・型は先に更新し、Consumer/Provider/スキーマ検証を通す。
- テストデータはFactory/Seedの単一点を更新。時刻/タイムゾーンは専用ケースで保持。
- スナップショット更新は文言/見た目のみ許容。意味差はテストを書き換え。
- モックは最新の契約に同期（勝手拡張/省略なし）。
- 並列E2Eはユーザ/データの名前空間化とDBリセットを自動化。
- クリティカル経路の軽量ベンチで差分を可視化（閾値逸脱でFail）。
- ドキュメント（README/テスト戦略/契約）をPR定型として更新。

## PR Gates
- ドキュメント更新義務: 仕様/挙動/公開API/UI/環境変数/セットアップに差分がある場合、`README.md` と/または `UserManual.md` を更新するか、`No-Docs-Change: <理由>` をPR本文に明記。
- テスト更新義務: コード変更により分岐/入出力/UIが変わる場合、該当するテスト（フロント/バック/統合/E2Eのいずれか）を更新または追加し、赤字を残さない。
- 受理条件: CIで型/リンタ/ユニット/結合/主要E2Eが緑、かつ `Docs: updated`（または `No-Docs-Change`）の明記があること。
