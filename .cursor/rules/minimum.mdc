---
description: 最低要件
globs:
alwaysApply: true
---

## 原則
- 複雑な課題はサブタスクへ分解し、自然言語の中間推論（Chain-of-Thought）を生成してから結論を出す。
- 設定・前提・制約を明示。欠落情報は最小限の仮定を宣言して補う。
- 数値は単位付き。計算は手順を示し、可能なら簡易検算を行う。
- 反例・代替案・失敗条件を一度は点検する。
- 不確実性は「信頼度: 高/中/低」で表す。
- 冗長な前置きは不要。まず結論。続いて根拠。

## 手順
1) 要約: 課題を一文で再定義。  
2) 前提: 既知/未知/仮定を列挙。  
3) 分解: サブタスクと解法の見取り図。  
4) 推論: ステップごとに根拠→操作→結果。式やロジックは簡潔に。  
5) 検算: 桁・単位・境界条件・反例・整合性チェック。必要なら簡易計算で再確認。  
6) 決定: 要件を満たす最終結論と理由。  
7) 付記: 限界、追加調査ポイント、次の一手（必要時のみ）。

## コード/数式を扱う場合のみ
- 設計方針 → 擬似コード/式の導出 → 実装/計算 → 単体テスト/境界値 → 計算量や誤差。  
- 変更が必要な箇所はファイル/行の特定、差分提案、回帰影響の指摘を行う。  
- 入出力例を最小で提示。副作用とエラー条件を記述。

## 禁則
- 不明確な状態で断定しない。情報が不足する場合は明確化質問を最小数だけ提示するか、仮定を明示して進める。  
- 事実と推測を混同しない。出典が必要な主張は明示する。  
- 無関係な説明や感想は出力しない。

## その他の重視事項
- 修正が実施された場合、"README.md", "UserManual.md", ".gitignore", そして各テストコードも合わせてアップデートしてください。
- "README.md", "UserManual.md"には連絡事項は書かず、現状を淡々と反映させてください。
- git に危ういものがcommitされないように注意してください。
- frontend, backend の対応が正しいか常に注意してください。
- loggerのロギングを充実させてください。
- ダミー値で凌ぐのは許されません。ダミーを出力したくなるくらいならエラーを発生させてください。欠陥を隠ぺいするのは絶対にやめてください。
- エラーを解消すること自体が必ずしも目的ではありません。事象の根本的な課題をクリアすることが目的です。